from django.contrib import admin
from .models import CustomUser, Patient, Doctor, Treatment, PatientTreatment, TreatmentStep, TreatmentStepPhoto, PatientReport
from django.contrib.auth.admin import UserAdmin
from django.utils.safestring import mark_safe
from django.http import HttpResponse
from django.urls import path
from django.shortcuts import redirect
from django.core.files.base import ContentFile
from datetime import datetime
import tempfile
import os

class CustomUserAdmin(UserAdmin):
    model = CustomUser
    list_display = ('email', 'username', 'is_active', 'is_patient', 'is_doctor', 'is_staff')
    list_filter = ('is_active', 'is_patient', 'is_doctor', 'is_staff')
    
    fieldsets = (
        (None, {'fields': ('email', 'username', 'password')}),
        ('Permissions', {
            'fields': ('is_active', 'is_patient', 'is_doctor', 'is_staff', 'is_superuser', 'groups', 'user_permissions'),
        }),
    )
    
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': (
                'email', 'username', 'password1', 'password2',
                'is_active', 'is_patient', 'is_doctor', 'is_staff', 'is_superuser'
            ),
        }),
    )
    
    search_fields = ('email', 'username')
    ordering = ('email',)

class PatientAdmin(admin.ModelAdmin):
    list_display = ('user', 'phone', 'doctor', 'get_report_count', 'get_generate_report_link')
    list_filter = ('doctor',)
    search_fields = ('user__email', 'user__username', 'phone')
    
    def get_report_count(self, obj):
        """Show number of reports for this patient"""
        count = obj.reports.filter(is_active=True).count()
        if count > 0:
            return f"üìÑ {count} report{'s' if count != 1 else ''}"
        return "No reports"
    get_report_count.short_description = 'Reports'
    
    def get_generate_report_link(self, obj):
        """Add a link to generate new PDF report"""
        url = f"/admin/accounts/patient/{obj.id}/generate-report/"
        return mark_safe(f'<a href="{url}" style="color: #417690;">ÔøΩ Generate New Report</a>')
    get_generate_report_link.short_description = 'Actions'
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('<int:patient_id>/generate-report/', self.admin_site.admin_view(self.generate_new_report), name='patient-generate-report'),
        ]
        return custom_urls + urls
    
    def generate_new_report(self, request, patient_id):
        """Generate and save new PDF report for a patient"""
        try:
            from .pdf_reports import generate_patient_pdf_report
            
            # Get the patient
            patient = Patient.objects.get(id=patient_id)
            
            # Generate PDF content
            pdf_content = generate_patient_pdf_report(patient_id)
            
            # Create filename
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"report_{patient.user.username}_{timestamp}.pdf"
            
            # Save as PatientReport
            report = PatientReport.objects.create(
                patient=patient,
                generated_by=request.user,
                title=f"Treatment Progress Report - {datetime.now().strftime('%B %d, %Y')}",
                notes=f"Generated by {request.user.get_full_name() or request.user.username} via Django Admin"
            )
            
            # Save PDF file
            report.report_file.save(
                filename,
                ContentFile(pdf_content),
                save=True
            )
            
            self.message_user(
                request, 
                f"‚úÖ Report generated successfully for {patient.user.email}. "
                f"File saved as: {filename}",
                level='SUCCESS'
            )
            
            # Redirect to the PatientReport admin to show the new report
            return redirect(f'/admin/accounts/patientreport/?patient__id__exact={patient_id}')
            
        except Patient.DoesNotExist:
            self.message_user(request, f"‚ùå Patient with ID {patient_id} not found.", level='ERROR')
            return redirect('admin:accounts_patient_changelist')
        except Exception as e:
            self.message_user(request, f"‚ùå Error generating report: {str(e)}", level='ERROR')
            return redirect('admin:accounts_patient_changelist')

class DoctorAdmin(admin.ModelAdmin):
    list_display = ('user', 'specialization')

class TreatmentAdmin(admin.ModelAdmin):
    list_display = ('patient', 'current_stage', 'get_qr_image', 'get_qr_image_url')

    def get_qr_image(self, obj):
        if obj.qr_image_url:
            return mark_safe(f'<img src="{obj.qr_image_url}" width="50" />')
        elif obj.qr_image:
            return mark_safe(f'<img src="{obj.qr_image.url}" width="50" />')
        return "No Image"
    get_qr_image.short_description = 'QR Code Image'

    def get_qr_image_url(self, obj):
        return obj.qr_image_url or "No ImgBB URL"
    get_qr_image_url.short_description = 'QR ImgBB URL'

    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)
        # Debug print after first save
        print(f"[DEBUG][TreatmentAdmin.save_model] After first save: id={obj.id}, qr_image={obj.qr_image}, qr_image_url={obj.qr_image_url}")

class TreatmentStepPhotoInline(admin.TabularInline):
    model = TreatmentStepPhoto
    extra = 1
    readonly_fields = ('uploaded_at', 'uploaded_by')
    
    def save_model(self, request, obj, form, change):
        if not obj.uploaded_by:
            obj.uploaded_by = request.user
        super().save_model(request, obj, form, change)

class TreatmentStepInline(admin.TabularInline):
    model = TreatmentStep
    extra = 1

@admin.register(PatientTreatment)
class PatientTreatmentAdmin(admin.ModelAdmin):
    inlines = [TreatmentStepInline]
    list_display = ('patient',)
    search_fields = ('patient__user__username',)

@admin.register(TreatmentStep)
class TreatmentStepAdmin(admin.ModelAdmin):
    list_display = ('name', 'get_patient_info', 'duration_days', 'start_date', 'is_active', 'is_completed', 'order', 'get_image_url')
    def save_model(self, request, obj, form, change):
        # Auto-set order if not provided
        if not obj.order:
            last_step = TreatmentStep.objects.filter(
                treatment=obj.treatment
            ).order_by('-order').first()
            obj.order = (last_step.order + 1) if last_step else 1
        # If this step is being set as active, deactivate other steps for this patient
        if obj.is_active:
            TreatmentStep.objects.filter(
                treatment=obj.treatment
            ).exclude(id=obj.id).update(is_active=False)
        super().save_model(request, obj, form, change)
        # Debug print after first save
        print(f"[DEBUG][TreatmentStepAdmin.save_model] After first save: id={obj.id}, image={obj.image}, image_url={obj.image_url}")
        # Add success message with patient info
        from django.contrib import messages
        patient_email = obj.treatment.patient.user.email
        messages.success(request, f'Step "{obj.name}" saved for patient {patient_email}')
    def get_image_url(self, obj):
        return obj.image_url or "No ImgBB URL"
    get_image_url.short_description = 'Step ImgBB URL'
    list_filter = ('is_active', 'is_completed', 'notification_sent', 'treatment__patient__doctor')
    search_fields = ('name', 'treatment__patient__user__username', 'treatment__patient__user__email')
    inlines = [TreatmentStepPhotoInline]
    list_editable = ('is_active', 'is_completed')
    ordering = ('treatment__patient__user__email', 'order')
    
    def get_patient_info(self, obj):
        """Display patient information in list view"""
        patient = obj.treatment.patient
        return f"{patient.user.email} ({patient.user.first_name} {patient.user.last_name})"
    get_patient_info.short_description = 'Patient'
    get_patient_info.admin_order_field = 'treatment__patient__user__email'
    
    fieldsets = (
        ('Step Information', {
            'fields': ('treatment', 'name', 'description', 'image')
        }),
        ('Timing & Order', {
            'fields': ('duration_days', 'start_date', 'order'),
            'description': 'Order determines the sequence of steps. Leave blank to auto-assign.'
        }),
        ('Status', {
            'fields': ('is_active', 'is_completed', 'notification_sent'),
            'description': 'Only one step per patient should be active at a time.'
        }),
    )
    
    def save_model(self, request, obj, form, change):
        # Auto-set order if not provided
        if not obj.order:
            last_step = TreatmentStep.objects.filter(
                treatment=obj.treatment
            ).order_by('-order').first()
            obj.order = (last_step.order + 1) if last_step else 1
        
        # If this step is being set as active, deactivate other steps for this patient
        if obj.is_active:
            TreatmentStep.objects.filter(
                treatment=obj.treatment
            ).exclude(id=obj.id).update(is_active=False)
        
        super().save_model(request, obj, form, change)
        
        # Add success message with patient info
        from django.contrib import messages
        patient_email = obj.treatment.patient.user.email
        messages.success(request, f'Step "{obj.name}" saved for patient {patient_email}')
    
    def response_add(self, request, obj, post_url_override=None):
        """Override to add 'Add another step for this patient' option"""
        if '_addanother_patient' in request.POST:
            # Redirect to add another step for the same patient
            from django.http import HttpResponseRedirect
            from django.urls import reverse
            url = reverse('admin:accounts_treatmentstep_add')
            url += f'?treatment={obj.treatment.id}'
            return HttpResponseRedirect(url)
        
        return super().response_add(request, obj, post_url_override)
    
    def response_change(self, request, obj):
        """Override to add 'Add another step for this patient' option for edit form"""
        if '_addanother_patient' in request.POST:
            from django.http import HttpResponseRedirect
            from django.urls import reverse
            url = reverse('admin:accounts_treatmentstep_add')
            url += f'?treatment={obj.treatment.id}'
            return HttpResponseRedirect(url)
        
        return super().response_change(request, obj)
    
    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)
        
        # Pre-populate treatment if specified in URL
        if 'treatment' in request.GET:
            try:
                treatment_id = int(request.GET['treatment'])
                if obj is None:  # Only for new objects
                    form.base_fields['treatment'].initial = treatment_id
                    # Also pre-populate the next order number
                    try:
                        treatment = PatientTreatment.objects.get(id=treatment_id)
                        last_step = TreatmentStep.objects.filter(
                            treatment=treatment
                        ).order_by('-order').first()
                        next_order = (last_step.order + 1) if last_step else 1
                        form.base_fields['order'].initial = next_order
                    except PatientTreatment.DoesNotExist:
                        pass
            except (ValueError, TypeError):
                pass
        
        return form
    
    def render_change_form(self, request, context, *args, **kwargs):
        # Add patient info to context
        obj = context.get('original')
        if obj:
            context['patient_info'] = f"Patient: {obj.treatment.patient.user.email}"
        
        context.update({
            'show_save_and_add_another': True,
            'show_save_and_continue': True,
        })
        return super().render_change_form(request, context, *args, **kwargs)

@admin.register(TreatmentStepPhoto)
class TreatmentStepPhotoAdmin(admin.ModelAdmin):
    list_display = ('step', 'get_step_patient', 'uploaded_by', 'uploaded_at', 'get_photo_status', 'get_image_url')
    def save_model(self, request, obj, form, change):
        if not obj.uploaded_by:
            obj.uploaded_by = request.user
        print(f"üîÑ Saving photo for step: {obj.step.name} (ID: {obj.step.id})")
        print(f"üìß Patient: {obj.step.treatment.patient.user.email}")
        super().save_model(request, obj, form, change)
        # Debug print after first save
        print(f"[DEBUG][TreatmentStepPhotoAdmin.save_model] After first save: id={obj.id}, image={obj.image}, image_url={obj.image_url}")
    def get_image_url(self, obj):
        return obj.image_url or "No ImgBB URL"
    get_image_url.short_description = 'Photo ImgBB URL'
    list_filter = ('step__treatment__patient__user__email', 'uploaded_at', 'uploaded_by')
    readonly_fields = ('uploaded_at',)
    
    def get_step_patient(self, obj):
        """Show which patient this photo belongs to"""
        return f"{obj.step.treatment.patient.user.email}"
    get_step_patient.short_description = 'Patient'
    
    def get_photo_status(self, obj):
        """Show photo status and note about permanent storage"""
        if obj.image:
            return mark_safe('<span style="color: green;">üì∏ Stored on ImgBB (Permanent)</span>')
        return "No photo"
    get_photo_status.short_description = 'Storage Status'
    
    def save_model(self, request, obj, form, change):
        if not obj.uploaded_by:
            obj.uploaded_by = request.user
        print(f"üîÑ Saving photo for step: {obj.step.name} (ID: {obj.step.id})")
        print(f"üìß Patient: {obj.step.treatment.patient.user.email}")
        super().save_model(request, obj, form, change)
    
    def delete_model(self, request, obj):
        """Custom delete with user feedback"""
        try:
            photo_name = obj.image.name if obj.image else "Unknown"
            super().delete_model(request, obj)
            
            from django.contrib import messages
            messages.success(
                request, 
                f"‚úÖ Photo record deleted successfully. "
                f"Note: The actual image file remains permanently stored on ImgBB "
                f"(this is standard practice for medical records)."
            )
        except Exception as e:
            from django.contrib import messages
            messages.error(request, f"‚ùå Error deleting photo: {str(e)}")
    
    def delete_queryset(self, request, queryset):
        """Custom bulk delete with user feedback"""
        try:
            count = queryset.count()
            super().delete_queryset(request, queryset)
            
            from django.contrib import messages
            messages.success(
                request, 
                f"‚úÖ {count} photo record{'s' if count != 1 else ''} deleted successfully. "
                f"Note: The actual image files remain permanently stored on ImgBB "
                f"(this is standard practice for medical records)."
            )
        except Exception as e:
            from django.contrib import messages
            messages.error(request, f"‚ùå Error deleting photos: {str(e)}")
    
    def get_readonly_fields(self, request, obj=None):
        """Add helpful text about permanent storage"""
        readonly = list(self.readonly_fields)
        return readonly



@admin.register(PatientReport)
class PatientReportAdmin(admin.ModelAdmin):
    list_display = ('patient', 'title', 'generated_at', 'generated_by', 'is_active', 'get_download_link')
    list_filter = ('is_active', 'generated_at', 'generated_by', 'patient__doctor')
    search_fields = ('patient__user__email', 'patient__user__username', 'title', 'notes')
    readonly_fields = ('generated_at',)
    list_editable = ('is_active',)
    ordering = ('-generated_at',)

    fieldsets = (
        ('Report Information', {
            'fields': ('patient', 'title', 'generated_by', 'generated_at')
        }),
        ('File Details', {
            'fields': ('report_file_url',)
        }),
        ('Report Period', {
            'fields': ('report_period_start', 'report_period_end'),
            'description': 'Optional: Specify the time period this report covers'
        }),
        ('Additional Information', {
            'fields': ('notes', 'is_active'),
            'description': 'Notes and visibility settings'
        }),
    )

    def get_download_link(self, obj):
        """Provide download link for the report"""
        if obj.report_file_url:
            return mark_safe(f'<a href="{obj.report_file_url}" target="_blank" style="color: #417690;">üì• Download PDF</a>')
        return "No file"
    get_download_link.short_description = 'Download'

    def save_model(self, request, obj, form, change):
        if not change:  # If creating new report
            obj.generated_by = request.user
        super().save_model(request, obj, form, change)

    def get_queryset(self, request):
        """Optimize database queries"""
        return super().get_queryset(request).select_related(
            'patient__user', 'generated_by'
        )


admin.site.register(CustomUser, CustomUserAdmin)
admin.site.register(Patient, PatientAdmin)
admin.site.register(Doctor, DoctorAdmin)
admin.site.register(Treatment, TreatmentAdmin)




