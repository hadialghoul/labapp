"""
Django settings for medical_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:hxFjJYmSCfIgpNVxviVoQzYRXNHWXIaR@yamabiko.proxy.rlwy.net:59699/railway")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-&rmq_l^-jfvodtek((f$(n3p_)&*1x47(q90wsq54%1y%bk^+g')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'  # False by default for production

ALLOWED_HOSTS = [
    '192.168.0.112', 
    'localhost', 
    '127.0.0.1',
    '0.0.0.0',
    '.railway.app',
    '.up.railway.app',
    'labapp-bnpd.onrender.com',  # Your Render domain
    '.onrender.com',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
    'djoser',
    'corsheaders',
    'accounts',
    'django.contrib.sites',
]

# Add django_crontab only in development
if DEBUG:
    INSTALLED_APPS.append('django_crontab')

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For serving static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'medical_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'medical_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use PostgreSQL in production and SQLite in development
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Static files configuration for production
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Static files finders - ensure Django admin static files are found
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# WhiteNoise configuration for serving static files in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Force collection of static files in production
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Media files configuration
# Use local storage in development, Supabase in production
if DEBUG:
    # Use local storage in development
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    # Ensure media directory exists
    os.makedirs(MEDIA_ROOT, exist_ok=True)
else:
    # Supabase settings for production
    SUPABASE_URL = os.environ.get('SUPABASE_URL', 'https://xvcjbtbcoybxuqhjwjgp.supabase.co')
    SUPABASE_KEY = os.environ.get('SUPABASE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh2Y2pidGJjb3lieHVxaGp3amdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTczMzY1MTksImV4cCI6MjA3MjkxMjUxOX0.KKNbvdY16SLOXmfpBmqVoGX2hohPO36wQpm3AAHia8k')
    SUPABASE_BUCKET_NAME = os.environ.get('SUPABASE_BUCKET_NAME', 'medical-lab-project')
    
    # Use Supabase for media files in production
    DEFAULT_FILE_STORAGE = 'medical_project.storage_backends.SupabaseStorage'
    
    # Update media URL to use Supabase
    MEDIA_URL = f'{SUPABASE_URL}/storage/v1/object/public/{SUPABASE_BUCKET_NAME}/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_CREDENTIALS = True  # allow credentials (cookies) to be sent cross-origin

# Trust the frontend origin for CSRF (development)
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8081',
    'http://127.0.0.1:8081',
    f'http://{os.environ.get("HOST_IP", "192.168.0.112")}:8081',  # optional helper
]

SITE_ID = 1

AUTH_USER_MODEL = 'accounts.CustomUser'






from datetime import timedelta



REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # allow session auth for browsable API / dev
    ),
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

DJOSER = {
    'LOGIN_FIELD': 'email',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'SEND_ACTIVATION_EMAIL': True,
    "DOMAIN": "192.168.0.111:8000",
    'ACTIVATION_URL': 'reactLab://activate/{uid}/{token}',
    'EMAIL': {
        'activation': 'djoser.email.ActivationEmail',
    },
    'SERIALIZERS': {
        'user_create': 'accounts.serializers.UserCreateSerializer',
        'user': 'accounts.serializers.UserSerializer',
    },
}



# For development only
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'caldentalab@gmail.com'  # <--- your Gmail address
EMAIL_HOST_PASSWORD = 'zpdewctrmdaxrqps' 
DEFAULT_FROM_EMAIL = 'caldentalab@gmail.com'

# Cron jobs configuration (development only)
if DEBUG:
    CRONJOBS = [
        # Check for finished treatment steps every hour and send notifications with auto-progress
        ('0 * * * *', 'django.core.management.call_command', ['notify_finished_steps', '--auto-progress']),
    ]